#!/usr/bin/env python
PACKAGE = "hros5_ros_control"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()
p_mid = 16.0
p_soft = 4.0
p = 32.0
i = 0.001
d = 1.0
p_max = 200.0
i_max = 100.0
d_max = 100.0

#9 stand up 15 crouched
gen.add("wake_up_motion",     int_t,  0, "wake up motion",	15, 0, 20)

#Head
gen.add("HeadYaw_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("HeadYaw_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("HeadYaw_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("HeadPitch_position_controller_p_gain",     double_t,  0, "p gain",	p_mid, 0.0, p_max)
gen.add("HeadPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("HeadPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

#Arms
gen.add("RShoulderPitch_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("RShoulderPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RShoulderPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LShoulderPitch_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("LShoulderPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LShoulderPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RShoulderRoll_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("RShoulderRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RShoulderRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LShoulderRoll_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("LShoulderRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LShoulderRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RElbowPitch_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("RElbowPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RElbowPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LElbowPitch_position_controller_p_gain",     double_t,  0, "p gain",	p_soft, 0.0, p_max)
gen.add("LElbowPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LElbowPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

#Legs
gen.add("RHipYaw_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RHipYaw_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RHipYaw_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LHipYaw_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LHipYaw_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LHipYaw_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RHipRoll_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RHipRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RHipRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LHipRoll_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LHipRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LHipRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RHipPitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RHipPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RHipPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LHipPitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LHipPitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LHipPitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RAnklePitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RAnklePitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RAnklePitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LAnklePitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LAnklePitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LAnklePitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RAnkleRoll_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RAnkleRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RAnkleRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LAnkleRoll_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LAnkleRoll_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LAnkleRoll_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("RKneePitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("RKneePitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("RKneePitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("LKneePitch_position_controller_p_gain",     double_t,  0, "p gain",	p, 0.0, p_max)
gen.add("LKneePitch_position_controller_i_gain",     double_t,  0, "i gain",	i, 0.0, i_max)
gen.add("LKneePitch_position_controller_d_gain",     double_t,  0, "d gain",	d, 0.0, d_max)

gen.add("print_check_fall_debug_info",     bool_t,  0, "Print additional IMU info while walking", False)

exit(gen.generate(PACKAGE, "hros5_ros_control", "hros5_ros_control"))
